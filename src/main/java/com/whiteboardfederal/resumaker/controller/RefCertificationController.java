package com.whiteboardfederal.resumaker.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.whiteboardfederal.resumaker.model.RefCertification;
import com.whiteboardfederal.resumaker.repository.RefCertificationRepository;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping(value = "/api/v1/RefCertification")
class RefCertificationController {

  @Autowired
  private RefCertificationRepository RefCertificationRepository;

  @ApiOperation(value = "Allows you to find certification details")
  @ApiResponses(value = { @ApiResponse(code = 200, message = "Successfully retrieved certification details."),
      @ApiResponse(code = 401, message = "You are not authorized to view this certification"),
      @ApiResponse(code = 403, message = "Accessing this certification is forbidden"),
      @ApiResponse(code = 404, message = "The certification you were trying to reach is not found") })
  @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
  List<RefCertification> findAll() {
    return RefCertificationRepository.findAll();
  }

  @ApiOperation(value = "Allows you to create a certification.")
  @ApiResponses(value = { @ApiResponse(code = 200, message = "Successfully created certification."),
      @ApiResponse(code = 401, message = "You are not authorized to create a certification"),
      @ApiResponse(code = 403, message = "Creating this certification is forbidden") })
  @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
  RefCertification create(@RequestBody RefCertification ref_cert) {
    return RefCertificationRepository.save(ref_cert);
  }

  @ApiOperation(value = "Allows you to update a certification with provided id.")
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "Successfully updated the certification with provided id."),
      @ApiResponse(code = 401, message = "You are not authorized to update this certification"),
      @ApiResponse(code = 403, message = "Updating this certification is forbidden"),
      @ApiResponse(code = 404, message = "The certification you were trying to reach is not found") })
  @PutMapping(value = "/{id}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
  RefCertification overwrite(@RequestBody RefCertification ref_cert, @PathVariable long id) {
    ref_cert.setId(id);
    return RefCertificationRepository.save(ref_cert);
  } // should think about not changing the autogenerated id value

  @ApiOperation(value = "Allows you to delete an certification with provided id.")
  @ApiResponses(value = { @ApiResponse(code = 204, message = "Successfully deleted the certification with provided id."),
      @ApiResponse(code = 401, message = "You are not authorized to delete certification"),
      @ApiResponse(code = 403, message = "Deleting this certification is forbidden"),
      @ApiResponse(code = 404, message = "The certification you were trying to reach is not found") })
  @DeleteMapping(value = "/{id}", consumes = MediaType.APPLICATION_JSON_VALUE)
  @ResponseStatus(value = HttpStatus.OK)
  void delete(@PathVariable long id) {
    RefCertificationRepository.deleteById(id);
  }
}